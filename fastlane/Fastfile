default_platform(:mac)

API_ID = ENV["API_ID"]
API_ISSUER = ENV["API_ISSUER"]
API_KEY = ENV["API_KEY"]
APP_CHANGELOG = ENV["APP_CHANGELOG"]
APP_ID = ENV["APP_ID"]
APP_IDENTIFIER = ENV["APP_IDENTIFIER"]
KEYCHAIN_NAME = ENV["KEYCHAIN_NAME"]
KEYCHAIN_PWD = ENV["KEYCHAIN_PWD"]
MATCH_TOKEN = ENV["MATCH_TOKEN"]
NOTARIZE_OBJECT = ENV["NOTARIZE_OBJECT"]

def get_api_key()
  return app_store_connect_api_key(
    key_id: API_ID,
    issuer_id: API_ISSUER,
    key_content: API_KEY,
    duration: 1200,
    in_house: false
  )
end

def fastlane_match(profile_type, api_key)
  match(
    type: profile_type,
    app_identifier: "#{APP_IDENTIFIER}",
    git_basic_authorization: Base64.strict_encode64(MATCH_TOKEN),
    readonly: true,
    skip_provisioning_profiles: true,
    keychain_name: KEYCHAIN_NAME,
    keychain_password: KEYCHAIN_PWD,
    api_key: api_key
  )
end

def fastlane_match_additional(cert_type, api_key)
  match(
    additional_cert_types: cert_type,
    app_identifier: "#{APP_IDENTIFIER}",
    git_basic_authorization: Base64.strict_encode64(MATCH_TOKEN),
    readonly: true,
    skip_provisioning_profiles: true,
    keychain_name: KEYCHAIN_NAME,
    keychain_password: KEYCHAIN_PWD,
    api_key: api_key
  )
end

def pilot_package(package_name)
  begin
    pilot(
      apple_id: "#{APP_ID}",
      app_identifier: "#{APP_IDENTIFIER}",
      changelog: "#{APP_CHANGELOG}",
      skip_waiting_for_build_processing: true,
      groups: "Dev",
      pkg: package_name
    )
  rescue StandardError => e
    UI.important(e.message + ' ⚠️')
    notityDiscord('Develop', 'Upload to Test Flight internal test failed', e.message, 13632027)
  end
end

def distribute_package(package_name)
  begin
    pilot(
      apple_id: "#{APP_ID}",
      app_identifier: "#{APP_IDENTIFIER}",
      changelog: "#{APP_CHANGELOG}",
      distribute_external: true,
      groups: ["Dev", "Test"],
      pkg: package_name
    )
  rescue StandardError => e
    UI.important(e.message + ' ⚠️')
    notityDiscord('Test', 'Upload to Test Flight external test failed', e.message, 13632027)
  end
end

def deliver_package(package_name)
  begin
    deliver(
      app_identifier: "#{APP_IDENTIFIER}",
      force: true,
      precheck_include_in_app_purchases: false,
      skip_screenshots: true,
      submit_for_review: true,
      reject_if_possible: true,
      automatic_release: true,
      pkg: package_name,
      submission_information: {
        add_id_info_uses_idfa: false
      }
    )
  rescue StandardError => e
    UI.important(e.message + ' ⚠️')
    notityDiscord('Release', 'Upload to App Store failed', e.message, 13632027)
  end
end

platform :mac do
  lane :get_cert do
    create_keychain(
      name: KEYCHAIN_NAME,
      password: KEYCHAIN_PWD,
      unlock: false,
      default_keychain: true,
      timeout: 0
    )

    fastlane_match("developer_id", get_api_key())
    fastlane_match_additional("developer_id_installer", get_api_key())
  end

  lane :make_safe do
    notarize(
      package: NOTARIZE_OBJECT,
      bundle_id: APP_IDENTIFIER,
      print_log: true,
      verbose: true,
      api_key: get_api_key()
    )
  end

  lane :dev do
    fastlane_match_additional("developer_id_installer", get_api_key())
    pilot_package(NOTARIZE_OBJECT)
  end

  lane :test do
    fastlane_match_additional("developer_id_installer", get_api_key())
    distribute_package(NOTARIZE_OBJECT)
  end

  lane :release do
    fastlane_match_additional("developer_id_installer", get_api_key())
    deliver_package(NOTARIZE_OBJECT)
  end
end
